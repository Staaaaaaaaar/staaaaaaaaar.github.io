<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ICS | 拆弹！我吗？</title>
    <link href="/2025/10/14/ics-bomblab/"/>
    <url>/2025/10/14/ics-bomblab/</url>
    
    <content type="html"><![CDATA[<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="熟悉-GDB-工具"><a href="#熟悉-GDB-工具" class="headerlink" title="熟悉 GDB 工具"></a>熟悉 GDB 工具</h2><p>建议事先阅读 CSAPP 中的 3.10.2 章节，这里给出部分指令参考：</p><table><thead><tr><th>指令</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>run</td><td>开始执行程序，直到下一个断点或程序结束</td></tr><tr><td>b</td><td>break</td><td>在指定位置设置断点</td></tr><tr><td>q</td><td>quit</td><td>退出 GDB 调试器</td></tr><tr><td>ni</td><td>next instruction</td><td>执行下一条指令</td></tr><tr><td>si</td><td>step instruction</td><td>执行当前指令，若是函数调用则进入函数</td></tr><tr><td>n</td><td>next</td><td>执行下一行代码</td></tr><tr><td>s</td><td>step</td><td>执行下一行代码，若有函数调用则进入函数</td></tr><tr><td>c</td><td>continue</td><td>从当前位置继续执行程序，直到下一个断点或程序结束</td></tr><tr><td>p</td><td>print</td><td>打印变量的值</td></tr><tr><td>p $rax</td><td></td><td>打印 %rax 寄存器的值</td></tr><tr><td>p&#x2F;x $rsp</td><td></td><td>以十六进制打印 %rsp 寄存器的值</td></tr><tr><td>p&#x2F;d $rsp</td><td></td><td>以十进制打印 %rsp 寄存器的值</td></tr><tr><td>x</td><td>examine</td><td>打印内存中的值</td></tr><tr><td>x&#x2F;2x $rsp</td><td></td><td>以十六进制格式查看 %rsp 处的 2 个内存单元</td></tr><tr><td>x&#x2F;2c $rsp</td><td></td><td>以字符格式查看 %rsp 处的 2 个内存单元</td></tr><tr><td>x&#x2F;s $rsp</td><td></td><td>将 %rsp 处的内存视为 C 风格字符串查看</td></tr><tr><td>x&#x2F;b $rsp</td><td></td><td>查看 %rsp 处的 1 个字节内存</td></tr><tr><td>x&#x2F;h $rsp</td><td></td><td>查看 %rsp 处的 1 个字（2 字节）内存</td></tr><tr><td>x&#x2F;w $rsp</td><td></td><td>查看 %rsp 处的 1 个二字（4 字节）内存</td></tr><tr><td>x&#x2F;g $rsp</td><td></td><td>查看 %rsp 处的 1 个四字（8 字节）内存</td></tr><tr><td>j</td><td>jump</td><td>跳转到程序指定位置</td></tr><tr><td>layout asm</td><td>assembly layout</td><td>显示汇编代码视图</td></tr><tr><td>layout regs</td><td>register layout</td><td>显示寄存器状态视图</td></tr></tbody></table><h2 id="了解炸弹结构"><a href="#了解炸弹结构" class="headerlink" title="了解炸弹结构"></a>了解炸弹结构</h2><p>首先，查看一下给出的 <code>bomb.c</code> 文件，了解炸弹的整体结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    input = read_line();<br>    phase_1(input);<br>    phase_defused(fp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Phase 1 defused. How about the next one?\n&quot;</span>);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>炸弹程序包含六个 <code>phase</code> ，每个 <code>phase</code> 都会读入一行输入，然后调用一个 <code>phase_defused</code> 函数来验证输入。</p><p>接着，我们反汇编 <code>bomb</code> 可执行文件，查看每个炸弹的细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d bomb &gt; bomb.asm<br></code></pre></td></tr></table></figure><p>阅读汇编代码，我们发现每个 <code>phase</code> 函数都包含一个 <code>explode_bomb</code> 的调用指令，形如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">27c1:e8 <span class="hljs-number">1d</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure><p>显而易见，这个函数会在输入错误时引爆炸弹，这是我们不想看到的。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>前文提到，我们不希望程序运行 <code>explode_bomb</code> 函数，因此我们利用 <code>gdb</code> 工具给 <code>explode_bomb</code> 设置断点，防止程序继续执行到引爆炸弹的指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb bomb<br>(gdb) b explode_bomb<br></code></pre></td></tr></table></figure><p>同时，为了方便我们对每个 <code>phase</code> 进行调试，我们也可以在每个 <code>phase</code> 函数入口处设置断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) b phase_1<br>(gdb) b phase_2<br>(gdb) b phase_3<br>(gdb) b phase_4<br>(gdb) b phase_5<br>(gdb) b phase_6<br></code></pre></td></tr></table></figure><h3 id="打开视图"><a href="#打开视图" class="headerlink" title="打开视图"></a>打开视图</h3><p>为了更好地观察程序每一步的执行情况以及寄存器状态，我们可以打开汇编代码视图和寄存器状态视图。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) layout asm<br>(gdb) layout regs<br></code></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>查看原代码发现，<code>bomb.c</code> 程序提供了文件读入的方式。为方便调试，我们可以将输入重定向到一个文件 <code>psol.txt</code> 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb bomb psol.txt<br></code></pre></td></tr></table></figure><h3 id="添加默认配置"><a href="#添加默认配置" class="headerlink" title="添加默认配置"></a>添加默认配置</h3><p>为了避免每次启动 <code>gdb</code> 都要手动设置断点，我们可以在当前目录下创建一个 <code>.gdbinit</code> 文件来设置 <code>gdb</code> 进入时的一些默认配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建当前目录下的 .gdbinit 文件</span><br><span class="hljs-built_in">touch</span> .gdbinit<br><span class="hljs-comment"># 创建 .config/gdb 文件夹</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/gdb<br><span class="hljs-comment"># 允许 gdb 预加载根目录下所有的文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set auto-load safe-path /&quot;</span> &gt; ~/.config/gdb/gdbinit<br></code></pre></td></tr></table></figure><p>在 <code>.gdbinit</code> 中添加默认配置：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> args <span class="hljs-comment">psol.txt</span><br><br>layout <span class="hljs-comment">asm</span><br>layout <span class="hljs-comment">regs</span><br><br>b <span class="hljs-comment">explode_bomb</span><br><br>b <span class="hljs-comment">phase_1</span><br>b <span class="hljs-comment">phase_2</span><br>b <span class="hljs-comment">phase_3</span><br>b <span class="hljs-comment">phase_4</span><br>b <span class="hljs-comment">phase_5</span><br>b <span class="hljs-comment">phase_6</span><br><br>r<br></code></pre></td></tr></table></figure><p>完成这些之后，我们就可以直接运行 <code>gdb bomb</code> 来开始拆弹了。</p><h1 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1"></a>Phase 1</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000027a4 &lt;phase_1&gt;:<br>    27a4:f3 0f 1e fa          endbr64<br>    27a8:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x8,%rsp<br>    27ac:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">35</span> <span class="hljs-number">05</span> 2a <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2a05</span>(%rip),%rsi        # 51b8 &lt;_IO_stdin_used+<span class="hljs-number">0x1b8</span>&gt;<br>    27b3:e8 <span class="hljs-number">16</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2cce &lt;strings_not_equal&gt;<br>    27b8:<span class="hljs-number">85</span> c0                <span class="hljs-keyword">test</span>   %eax,%eax<br>    27ba:<span class="hljs-number">75</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">jne</span>    27c1 &lt;phase_1+<span class="hljs-number">0x1d</span>&gt;<br>    27bc:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x8,%rsp<br>    27c0:c3                   <span class="hljs-keyword">ret</span><br>    27c1:e8 <span class="hljs-number">1d</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    27c6:eb f4                <span class="hljs-keyword">jmp</span>    27bc &lt;phase_1+<span class="hljs-number">0x18</span>&gt;<br></code></pre></td></tr></table></figure><p>从汇编代码中可以看出，<code>phase_1</code> 函数调用了 <code>strings_not_equal</code> 函数来比较输入字符串和某个预设字符串是否相等。因此，我们只需要在执行 <code>call strings_not_equal</code> 之前，获取到 <code>%rsi</code> 指向的字符串即可。</p><p><img src="/img/ics-bomblab/phase-1.png"></p><p>可见 phase 1 的答案就是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">We can be both of God and the devil. Since we&#x27;re trying to raise the dead against the stream of time.<br></code></pre></td></tr></table></figure><h1 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2"></a>Phase 2</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000027c8 &lt;phase_2&gt;:<br>    27c8:f3 0f 1e fa          endbr64<br>    27cc:<span class="hljs-number">53</span>                   <span class="hljs-keyword">push</span>   %rbx<br>    27cd:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">20</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x20,%rsp<br>    27d1:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 8b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">mov</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    27d8:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    27da:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       <span class="hljs-keyword">mov</span>    %rax,<span class="hljs-number">0x18</span>(%rsp)<br>    27df:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>    27e1:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             <span class="hljs-keyword">mov</span>    %rsp,%rsi<br>    27e4:e8 <span class="hljs-number">80</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   <span class="hljs-number">3069</span> &lt;read_six_numbers&gt;<br>    27e9:<span class="hljs-number">83</span> 3c <span class="hljs-number">24</span> <span class="hljs-number">00</span>          cmpl   <span class="hljs-number">$0</span>x0,(%rsp)<br>    27ed:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                <span class="hljs-keyword">jne</span>    27f6 &lt;phase_2+<span class="hljs-number">0x2e</span>&gt;<br>    27ef:<span class="hljs-number">83</span> 7c <span class="hljs-number">24</span> <span class="hljs-number">04</span> <span class="hljs-number">01</span>       cmpl   <span class="hljs-number">$0</span>x1,<span class="hljs-number">0x4</span>(%rsp)<br>    27f4:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">je</span>     27fb &lt;phase_2+<span class="hljs-number">0x33</span>&gt;<br>    27f6:e8 e8 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    27fb:bb <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x2,%ebx<br>    <span class="hljs-number">2800</span>:eb <span class="hljs-number">03</span>                <span class="hljs-keyword">jmp</span>    <span class="hljs-number">2805</span> &lt;phase_2+<span class="hljs-number">0x3d</span>&gt;<br>    <span class="hljs-number">2802</span>:<span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%ebx<br>    <span class="hljs-number">2805</span>:<span class="hljs-number">83</span> fb <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%ebx<br>    <span class="hljs-number">2808</span>:7f <span class="hljs-number">24</span>                <span class="hljs-keyword">jg</span>     282e &lt;phase_2+<span class="hljs-number">0x66</span>&gt;<br>    280a:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c3             movslq %ebx,%rax<br>    <span class="hljs-number">280d</span>:<span class="hljs-number">8d</span> <span class="hljs-number">53</span> fe             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x2</span>(%rbx),%edx<br>    <span class="hljs-number">2810</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d2             movslq %edx,%rdx<br>    <span class="hljs-number">2813</span>:8b 0c <span class="hljs-number">94</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rdx,<span class="hljs-number">4</span>),%ecx<br>    <span class="hljs-number">2816</span>:<span class="hljs-number">8d</span> <span class="hljs-number">53</span> ff             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x1</span>(%rbx),%edx<br>    <span class="hljs-number">2819</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d2             movslq %edx,%rdx<br>    281c:8b <span class="hljs-number">14</span> <span class="hljs-number">94</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rdx,<span class="hljs-number">4</span>),%edx<br>    281f:<span class="hljs-number">8d</span> <span class="hljs-number">14</span> 4a             <span class="hljs-keyword">lea</span>    (%rdx,%rcx,<span class="hljs-number">2</span>),%edx<br>    <span class="hljs-number">2822</span>:<span class="hljs-number">39</span> <span class="hljs-number">14</span> <span class="hljs-number">84</span>             <span class="hljs-keyword">cmp</span>    %edx,(%rsp,%rax,<span class="hljs-number">4</span>)<br>    <span class="hljs-number">2825</span>:<span class="hljs-number">74</span> <span class="hljs-built_in">db</span>                <span class="hljs-keyword">je</span>     <span class="hljs-number">2802</span> &lt;phase_2+<span class="hljs-number">0x3a</span>&gt;<br>    <span class="hljs-number">2827</span>:e8 b7 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    282c:eb d4                <span class="hljs-keyword">jmp</span>    <span class="hljs-number">2802</span> &lt;phase_2+<span class="hljs-number">0x3a</span>&gt;<br>    282e:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x18</span>(%rsp),%rax<br>    <span class="hljs-number">2833</span>:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 2b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">sub</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    283a:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    283c:<span class="hljs-number">75</span> <span class="hljs-number">06</span>                <span class="hljs-keyword">jne</span>    <span class="hljs-number">2844</span> &lt;phase_2+<span class="hljs-number">0x7c</span>&gt;<br>    283e:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">20</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x20,%rsp<br>    <span class="hljs-number">2842</span>:5b                   <span class="hljs-keyword">pop</span>    %rbx<br>    <span class="hljs-number">2843</span>:c3                   <span class="hljs-keyword">ret</span><br>    <span class="hljs-number">2844</span>:e8 <span class="hljs-number">67</span> fa ff ff       <span class="hljs-keyword">call</span>   22b0 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p>phase 2 相较于 phase 1 复杂了一些，我们一步一步拆解。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000027c8 &lt;phase_2&gt;:<br>    <span class="hljs-comment">; ...</span><br>    27da:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       <span class="hljs-keyword">mov</span>    %rax,<span class="hljs-number">0x18</span>(%rsp)<br>    27df:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>    27e1:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             <span class="hljs-keyword">mov</span>    %rsp,%rsi<br>    27e4:e8 <span class="hljs-number">80</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   <span class="hljs-number">3069</span> &lt;read_six_numbers&gt;<br>    27e9:<span class="hljs-number">83</span> 3c <span class="hljs-number">24</span> <span class="hljs-number">00</span>          cmpl   <span class="hljs-number">$0</span>x0,(%rsp)<br>    27ed:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                <span class="hljs-keyword">jne</span>    27f6 &lt;phase_2+<span class="hljs-number">0x2e</span>&gt;<br>    <span class="hljs-comment">; ...</span><br>    27f6:e8 e8 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure><p>程序首先调用 <code>read_six_numbers</code> 读取 6 个数，然后将 (%rsp) 与 0 进行比较，如果不等于 0 则引爆炸弹。我们可以先尝试性地输入 <code>1 2 3 4 5 6</code> ，在程序运行到 <code>cmpl $0x0,(%rsp)</code> 时，查看 <code>(%rsp)</code> 的内容。</p><p><img src="/img/ics-bomblab/phase-2.png"></p><p>可见输入的 6 个数被保存在以 <code>%rsp</code> 为起始地址的内存中，每个数占 4 个字节。知道了这一点，后面的分析就简单多了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000027c8 &lt;phase_2&gt;:<br>    <span class="hljs-comment">; ...</span><br>    27e4:e8 <span class="hljs-number">80</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   <span class="hljs-number">3069</span> &lt;read_six_numbers&gt;<br>    27e9:<span class="hljs-number">83</span> 3c <span class="hljs-number">24</span> <span class="hljs-number">00</span>          cmpl   <span class="hljs-number">$0</span>x0,(%rsp)  <span class="hljs-comment">; numbers[0] = 0</span><br>    27ed:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                <span class="hljs-keyword">jne</span>    27f6 &lt;phase_2+<span class="hljs-number">0x2e</span>&gt;<br>    27ef:<span class="hljs-number">83</span> 7c <span class="hljs-number">24</span> <span class="hljs-number">04</span> <span class="hljs-number">01</span>       cmpl   <span class="hljs-number">$0</span>x1,<span class="hljs-number">0x4</span>(%rsp)  <span class="hljs-comment">; numbers[1] = 1</span><br>    27f4:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">je</span>     27fb &lt;phase_2+<span class="hljs-number">0x33</span>&gt;<br>    27f6:e8 e8 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    27fb:bb <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x2,%ebx<br>    <span class="hljs-number">2800</span>:eb <span class="hljs-number">03</span>                <span class="hljs-keyword">jmp</span>    <span class="hljs-number">2805</span> &lt;phase_2+<span class="hljs-number">0x3d</span>&gt;<br>    <span class="hljs-number">2802</span>:<span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%ebx<br>    <span class="hljs-number">2805</span>:<span class="hljs-number">83</span> fb <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%ebx<br>    <span class="hljs-number">2808</span>:7f <span class="hljs-number">24</span>                <span class="hljs-keyword">jg</span>     282e &lt;phase_2+<span class="hljs-number">0x66</span>&gt;  <span class="hljs-comment">; if (%ebx &gt; 5) done</span><br>    280a:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c3             movslq %ebx,%rax<br>    <span class="hljs-number">280d</span>:<span class="hljs-number">8d</span> <span class="hljs-number">53</span> fe             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x2</span>(%rbx),%edx<br>    <span class="hljs-number">2810</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d2             movslq %edx,%rdx<br>    <span class="hljs-number">2813</span>:8b 0c <span class="hljs-number">94</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rdx,<span class="hljs-number">4</span>),%ecx  <span class="hljs-comment">; a = numbers[%rbx-2]</span><br>    <span class="hljs-number">2816</span>:<span class="hljs-number">8d</span> <span class="hljs-number">53</span> ff             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x1</span>(%rbx),%edx<br>    <span class="hljs-number">2819</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d2             movslq %edx,%rdx<br>    281c:8b <span class="hljs-number">14</span> <span class="hljs-number">94</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rdx,<span class="hljs-number">4</span>),%edx  <span class="hljs-comment">; b = numbers[%rbx-1]</span><br>    281f:<span class="hljs-number">8d</span> <span class="hljs-number">14</span> 4a             <span class="hljs-keyword">lea</span>    (%rdx,%rcx,<span class="hljs-number">2</span>),%edx  <span class="hljs-comment">; c = 2*a + b</span><br>    <span class="hljs-number">2822</span>:<span class="hljs-number">39</span> <span class="hljs-number">14</span> <span class="hljs-number">84</span>             <span class="hljs-keyword">cmp</span>    %edx,(%rsp,%rax,<span class="hljs-number">4</span>)  <span class="hljs-comment">; numbers[%rbx] = c</span><br>    <span class="hljs-number">2825</span>:<span class="hljs-number">74</span> <span class="hljs-built_in">db</span>                <span class="hljs-keyword">je</span>     <span class="hljs-number">2802</span> &lt;phase_2+<span class="hljs-number">0x3a</span>&gt;<br>    <span class="hljs-number">2827</span>:e8 b7 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    282c:eb d4                <span class="hljs-keyword">jmp</span>    <span class="hljs-number">2802</span> &lt;phase_2+<span class="hljs-number">0x3a</span>&gt;<br>    282e:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x18</span>(%rsp),%rax<br>    <span class="hljs-comment">; ...</span><br></code></pre></td></tr></table></figure><p>对关键步分析后，我们可以总结出 phase 2 的要求：</p><ol><li>输入的第一个数必须为 0</li><li>输入的第二个数必须为 1</li><li>从第三个数开始，必须满足 <code>numbers[i] = 2 * numbers[i-2] + numbers[i-1]</code> 的关系</li></ol><p>根据上述要求，我们可以计算出 phase 2 的答案：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">0 1 1 3 5 11<br></code></pre></td></tr></table></figure><h1 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3"></a>Phase 3</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000002849</span> &lt;phase_3&gt;:<br>    <span class="hljs-number">2849</span>:f3 0f 1e fa          endbr64<br>    <span class="hljs-number">284d</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x18,%rsp<br>    <span class="hljs-number">2851</span>:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 8b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">mov</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    <span class="hljs-number">2858</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    285a:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       <span class="hljs-keyword">mov</span>    %rax,<span class="hljs-number">0x8</span>(%rsp)<br>    285f:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>    <span class="hljs-number">2861</span>:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> 4c <span class="hljs-number">24</span> <span class="hljs-number">04</span>       <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x4</span>(%rsp),%rcx<br>    <span class="hljs-number">2866</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e2             <span class="hljs-keyword">mov</span>    %rsp,%rdx<br>    <span class="hljs-number">2869</span>:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">35</span> f8 <span class="hljs-number">2d</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2df8</span>(%rip),%rsi        # <span class="hljs-number">5668</span> &lt;array<span class="hljs-number">.0</span>+<span class="hljs-number">0x328</span>&gt;<br>    <span class="hljs-number">2870</span>:e8 eb fa ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2360</span> &lt;__isoc99_sscanf@plt&gt;<br>    <span class="hljs-number">2875</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">01</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x1,%eax<br>    <span class="hljs-number">2878</span>:7e 1a                <span class="hljs-keyword">jle</span>    <span class="hljs-number">2894</span> &lt;phase_3+<span class="hljs-number">0x4b</span>&gt;<br>    287a:<span class="hljs-number">83</span> 3c <span class="hljs-number">24</span> <span class="hljs-number">07</span>          cmpl   <span class="hljs-number">$0</span>x7,(%rsp)<br>    287e:<span class="hljs-number">77</span> <span class="hljs-number">65</span>                <span class="hljs-keyword">ja</span>     28e5 &lt;phase_3+<span class="hljs-number">0x9c</span>&gt;<br>    <span class="hljs-number">2880</span>:8b <span class="hljs-number">04</span> <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%eax<br>    <span class="hljs-number">2883</span>:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">15</span> <span class="hljs-number">96</span> 2a <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2a96</span>(%rip),%rdx        # <span class="hljs-number">5320</span> &lt;_IO_stdin_used+<span class="hljs-number">0x320</span>&gt;<br>    288a:<span class="hljs-number">48</span> <span class="hljs-number">63</span> <span class="hljs-number">04</span> <span class="hljs-number">82</span>          movslq (%rdx,%rax,<span class="hljs-number">4</span>),%rax<br>    288e:<span class="hljs-number">48</span> <span class="hljs-number">01</span> d0             <span class="hljs-keyword">add</span>    %rdx,%rax<br>    <span class="hljs-number">2891</span>:3e ff e0             notrack <span class="hljs-keyword">jmp</span> *%rax<br>    <span class="hljs-number">2894</span>:e8 4a <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    <span class="hljs-number">2899</span>:eb df                <span class="hljs-keyword">jmp</span>    287a &lt;phase_3+<span class="hljs-number">0x31</span>&gt;<br>    289b:b8 f5 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x1f5,%eax<br>    28a0:<span class="hljs-number">39</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">04</span>          <span class="hljs-keyword">cmp</span>    %eax,<span class="hljs-number">0x4</span>(%rsp)<br>    28a4:<span class="hljs-number">75</span> <span class="hljs-number">52</span>                <span class="hljs-keyword">jne</span>    28f8 &lt;phase_3+<span class="hljs-number">0xaf</span>&gt;<br>    28a6:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rsp),%rax<br>    28ab:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 2b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">sub</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    28b2:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    28b4:<span class="hljs-number">75</span> <span class="hljs-number">49</span>                <span class="hljs-keyword">jne</span>    28ff &lt;phase_3+<span class="hljs-number">0xb6</span>&gt;<br>    28b6:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x18,%rsp<br>    28ba:c3                   <span class="hljs-keyword">ret</span><br>    28bb:b8 3b <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x33b,%eax<br>    28c0:eb de                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28c2:b8 <span class="hljs-number">83</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x383,%eax<br>    28c7:eb d7                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28c9:b8 c0 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x3c0,%eax<br>    28ce:eb d0                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28d0:b8 <span class="hljs-number">96</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x296,%eax<br>    28d5:eb c9                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28d7:b8 fe <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x2fe,%eax<br>    28dc:eb c2                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28de:b8 7e <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x27e,%eax<br>    28e3:eb bb                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28e5:e8 f9 <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    28ea:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%eax<br>    28ef:eb af                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28f1:b8 <span class="hljs-number">11</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x311,%eax<br>    28f6:eb a8                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br>    28f8:e8 e6 <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    28fd:eb a7                <span class="hljs-keyword">jmp</span>    28a6 &lt;phase_3+<span class="hljs-number">0x5d</span>&gt;<br>    28ff:e8 ac f9 ff ff       <span class="hljs-keyword">call</span>   22b0 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p>注意到 phase 3 开头调用了 <code>__isoc99_sscanf@plt</code> 函数读取输入，同时我们也知道函数调用传入的参数会被依次放在 <code>%rdi</code>、<code>%rsi</code>、<code>%rdx</code>、<code>%rcx</code> 等寄存器中。因此，我们可以在执行 <code>__isoc99_sscanf@plt</code> 的调用前，查看这些寄存器的值来推测输入的内容。</p><p><img src="/img/ics-bomblab/phase-3.png"></p><p>可见输入的格式为两个整数。参考 phase 2，猜测两个整数被存放在 <code>%rsp</code> 和 <code>0x4(%rsp)</code> 处（事实上确实如此，可通过调试验证）。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000002849</span> &lt;phase_3&gt;:<br>    <span class="hljs-comment">; ...</span><br>    287a:<span class="hljs-number">83</span> 3c <span class="hljs-number">24</span> <span class="hljs-number">07</span>          cmpl   <span class="hljs-number">$0</span>x7,(%rsp)<br>    287e:<span class="hljs-number">77</span> <span class="hljs-number">65</span>                <span class="hljs-keyword">ja</span>     28e5 &lt;phase_3+<span class="hljs-number">0x9c</span>&gt;<br>    <span class="hljs-comment">; ...</span><br>    28e5:e8 f9 <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    <span class="hljs-comment">; ...</span><br></code></pre></td></tr></table></figure><p>输入的第一个整数必须小于等于 7，否则引爆炸弹。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000002849</span> &lt;phase_3&gt;:<br>    <span class="hljs-comment">; ...</span><br>    <span class="hljs-number">2880</span>:8b <span class="hljs-number">04</span> <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%eax<br>    <span class="hljs-number">2883</span>:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">15</span> <span class="hljs-number">96</span> 2a <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2a96</span>(%rip),%rdx        # <span class="hljs-number">5320</span> &lt;_IO_stdin_used+<span class="hljs-number">0x320</span>&gt;<br>    288a:<span class="hljs-number">48</span> <span class="hljs-number">63</span> <span class="hljs-number">04</span> <span class="hljs-number">82</span>          movslq (%rdx,%rax,<span class="hljs-number">4</span>),%rax<br>    288e:<span class="hljs-number">48</span> <span class="hljs-number">01</span> d0             <span class="hljs-keyword">add</span>    %rdx,%rax<br>    <span class="hljs-number">2891</span>:3e ff e0             notrack <span class="hljs-keyword">jmp</span> *%rax<br>    <span class="hljs-number">2894</span>:e8 4a <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    <span class="hljs-comment">; ...</span><br></code></pre></td></tr></table></figure><p>这段汇编代码依赖于输入的第一个整数跳转到不同的位置，类似于跳转表的结构。我们可以随机输入一个数字来看看跳转到了什么位置，进而只需满足对应分支的处理即可。我们以输入 <code>2</code> 为例，发现跳转到了 <code>28bb</code> 处。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000002849</span> &lt;phase_3&gt;:<br>    <span class="hljs-comment">; ...</span><br>    28a0:<span class="hljs-number">39</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">04</span>          <span class="hljs-keyword">cmp</span>    %eax,<span class="hljs-number">0x4</span>(%rsp)<br>    28a4:<span class="hljs-number">75</span> <span class="hljs-number">52</span>                <span class="hljs-keyword">jne</span>    28f8 &lt;phase_3+<span class="hljs-number">0xaf</span>&gt;  <span class="hljs-comment">; if (input[1] != eax) explode_bomb()</span><br>    28a6:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rsp),%rax<br>    28ab:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 2b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">sub</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    28b2:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    28b4:<span class="hljs-number">75</span> <span class="hljs-number">49</span>                <span class="hljs-keyword">jne</span>    28ff &lt;phase_3+<span class="hljs-number">0xb6</span>&gt;<br>    28b6:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x18,%rsp<br>    28ba:c3                   <span class="hljs-keyword">ret</span><br>    <span class="hljs-comment">; ...</span><br>    28bb:b8 3b <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x33b,%eax  <span class="hljs-comment">; eax = 0x33b</span><br>    28c0:eb de                <span class="hljs-keyword">jmp</span>    28a0 &lt;phase_3+<span class="hljs-number">0x57</span>&gt;<br></code></pre></td></tr></table></figure><p>由此可知，输入的第二个整数必须等于 0x33b（即 827）。综上，phase 3 的答案之一为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">2 827<br></code></pre></td></tr></table></figure><h1 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4"></a>Phase 4</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000002904</span> &lt;func4&gt;:<br>    <span class="hljs-number">2904</span>:f3 0f 1e fa          endbr64<br>    <span class="hljs-number">2908</span>:<span class="hljs-number">53</span>                   <span class="hljs-keyword">push</span>   %rbx<br>    <span class="hljs-number">2909</span>:<span class="hljs-number">89</span> d0                <span class="hljs-keyword">mov</span>    %edx,%eax<br>    290b:<span class="hljs-number">29</span> f0                <span class="hljs-keyword">sub</span>    %esi,%eax<br>    <span class="hljs-number">290d</span>:<span class="hljs-number">89</span> c3                <span class="hljs-keyword">mov</span>    %eax,%ebx<br>    290f:c1 eb 1f             <span class="hljs-keyword">shr</span>    <span class="hljs-number">$0</span>x1f,%ebx<br>    <span class="hljs-number">2912</span>:<span class="hljs-number">01</span> c3                <span class="hljs-keyword">add</span>    %eax,%ebx<br>    <span class="hljs-number">2914</span>:d1 fb                <span class="hljs-keyword">sar</span>    <span class="hljs-number">$1</span>,%ebx<br>    <span class="hljs-number">2916</span>:<span class="hljs-number">01</span> f3                <span class="hljs-keyword">add</span>    %esi,%ebx<br>    <span class="hljs-number">2918</span>:<span class="hljs-number">39</span> fb                <span class="hljs-keyword">cmp</span>    %edi,%ebx<br>    291a:7f <span class="hljs-number">06</span>                <span class="hljs-keyword">jg</span>     <span class="hljs-number">2922</span> &lt;func4+<span class="hljs-number">0x1e</span>&gt;<br>    291c:7c <span class="hljs-number">10</span>                <span class="hljs-keyword">jl</span>     292e &lt;func4+<span class="hljs-number">0x2a</span>&gt;<br>    291e:<span class="hljs-number">89</span> d8                <span class="hljs-keyword">mov</span>    %ebx,%eax<br>    <span class="hljs-number">2920</span>:5b                   <span class="hljs-keyword">pop</span>    %rbx<br>    <span class="hljs-number">2921</span>:c3                   <span class="hljs-keyword">ret</span><br>    <span class="hljs-number">2922</span>:<span class="hljs-number">8d</span> <span class="hljs-number">53</span> ff             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x1</span>(%rbx),%edx<br>    <span class="hljs-number">2925</span>:e8 da ff ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2904</span> &lt;func4&gt;<br>    292a:<span class="hljs-number">01</span> c3                <span class="hljs-keyword">add</span>    %eax,%ebx<br>    292c:eb f0                <span class="hljs-keyword">jmp</span>    291e &lt;func4+<span class="hljs-number">0x1a</span>&gt;<br>    292e:<span class="hljs-number">8d</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span>             <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x1</span>(%rbx),%esi<br>    <span class="hljs-number">2931</span>:e8 ce ff ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2904</span> &lt;func4&gt;<br>    <span class="hljs-number">2936</span>:<span class="hljs-number">01</span> c3                <span class="hljs-keyword">add</span>    %eax,%ebx<br>    <span class="hljs-number">2938</span>:eb e4                <span class="hljs-keyword">jmp</span>    291e &lt;func4+<span class="hljs-number">0x1a</span>&gt;<br><br>000000000000293a &lt;phase_4&gt;:<br>    293a:f3 0f 1e fa          endbr64<br>    293e:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x18,%rsp<br>    <span class="hljs-number">2942</span>:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 8b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">mov</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    <span class="hljs-number">2949</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    294b:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       <span class="hljs-keyword">mov</span>    %rax,<span class="hljs-number">0x8</span>(%rsp)<br>    <span class="hljs-number">2950</span>:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>    <span class="hljs-number">2952</span>:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> 4c <span class="hljs-number">24</span> <span class="hljs-number">04</span>       <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x4</span>(%rsp),%rcx<br>    <span class="hljs-number">2957</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e2             <span class="hljs-keyword">mov</span>    %rsp,%rdx<br>    295a:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">35</span> <span class="hljs-number">07</span> <span class="hljs-number">2d</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2d07</span>(%rip),%rsi        # <span class="hljs-number">5668</span> &lt;array<span class="hljs-number">.0</span>+<span class="hljs-number">0x328</span>&gt;<br>    <span class="hljs-number">2961</span>:e8 fa f9 ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2360</span> &lt;__isoc99_sscanf@plt&gt;<br>    <span class="hljs-number">2966</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">02</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x2,%eax<br>    <span class="hljs-number">2969</span>:<span class="hljs-number">75</span> 0c                <span class="hljs-keyword">jne</span>    <span class="hljs-number">2977</span> &lt;phase_4+<span class="hljs-number">0x3d</span>&gt;<br>    296b:8b <span class="hljs-number">04</span> <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%eax<br>    296e:<span class="hljs-number">85</span> c0                <span class="hljs-keyword">test</span>   %eax,%eax<br>    <span class="hljs-number">2970</span>:<span class="hljs-number">78</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">js</span>     <span class="hljs-number">2977</span> &lt;phase_4+<span class="hljs-number">0x3d</span>&gt;<br>    <span class="hljs-number">2972</span>:<span class="hljs-number">83</span> f8 0e             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xe,%eax<br>    <span class="hljs-number">2975</span>:7e <span class="hljs-number">05</span>                <span class="hljs-keyword">jle</span>    297c &lt;phase_4+<span class="hljs-number">0x42</span>&gt;<br>    <span class="hljs-number">2977</span>:e8 <span class="hljs-number">67</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    297c:ba 0e <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>xe,%edx<br>    <span class="hljs-number">2981</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%esi<br>    <span class="hljs-number">2986</span>:8b 3c <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%edi<br>    <span class="hljs-number">2989</span>:e8 <span class="hljs-number">76</span> ff ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2904</span> &lt;func4&gt;<br>    298e:<span class="hljs-number">83</span> f8 <span class="hljs-number">0b</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xb,%eax<br>    <span class="hljs-number">2991</span>:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                <span class="hljs-keyword">jne</span>    299a &lt;phase_4+<span class="hljs-number">0x60</span>&gt;<br>    <span class="hljs-number">2993</span>:<span class="hljs-number">83</span> 7c <span class="hljs-number">24</span> <span class="hljs-number">04</span> <span class="hljs-number">0b</span>       cmpl   <span class="hljs-number">$0</span>xb,<span class="hljs-number">0x4</span>(%rsp)<br>    <span class="hljs-number">2998</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">je</span>     299f &lt;phase_4+<span class="hljs-number">0x65</span>&gt;<br>    299a:e8 <span class="hljs-number">44</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    299f:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rsp),%rax<br>    29a4:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 2b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">sub</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    29ab:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    29ad:<span class="hljs-number">75</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">jne</span>    29b4 &lt;phase_4+<span class="hljs-number">0x7a</span>&gt;<br>    29af:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x18,%rsp<br>    29b3:c3                   <span class="hljs-keyword">ret</span><br>    29b4:e8 f7 f8 ff ff       <span class="hljs-keyword">call</span>   22b0 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p>首先，我们注意到了熟悉的函数调用 <code>__isoc99_sscanf@plt</code>，同样地，我们可以在调用前查看相关寄存器的值来推测输入格式，发现为输入是两个整数。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">000000000000293a &lt;phase_4&gt;:<br>    <span class="hljs-comment">; ...</span><br>    <span class="hljs-number">2966</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">02</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x2,%eax<br>    <span class="hljs-number">2969</span>:<span class="hljs-number">75</span> 0c                <span class="hljs-keyword">jne</span>    <span class="hljs-number">2977</span> &lt;phase_4+<span class="hljs-number">0x3d</span>&gt;  <span class="hljs-comment">; if (num_inputs != 2) explode_bomb()</span><br>    296b:8b <span class="hljs-number">04</span> <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%eax  <span class="hljs-comment">; eax = input[0]</span><br>    296e:<span class="hljs-number">85</span> c0                <span class="hljs-keyword">test</span>   %eax,%eax<br>    <span class="hljs-number">2970</span>:<span class="hljs-number">78</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">js</span>     <span class="hljs-number">2977</span> &lt;phase_4+<span class="hljs-number">0x3d</span>&gt;  <span class="hljs-comment">; if (eax &lt; 0) explode_bomb()</span><br>    <span class="hljs-number">2972</span>:<span class="hljs-number">83</span> f8 0e             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xe,%eax<br>    <span class="hljs-number">2975</span>:7e <span class="hljs-number">05</span>                <span class="hljs-keyword">jle</span>    297c &lt;phase_4+<span class="hljs-number">0x42</span>&gt;  <span class="hljs-comment">; if (eax &gt; 14) explode_bomb()</span><br>    <span class="hljs-number">2977</span>:e8 <span class="hljs-number">67</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    297c:ba 0e <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>xe,%edx  <span class="hljs-comment">; edx = 14</span><br>    <span class="hljs-number">2981</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%esi  <span class="hljs-comment">; esi = 0</span><br>    <span class="hljs-number">2986</span>:8b 3c <span class="hljs-number">24</span>             <span class="hljs-keyword">mov</span>    (%rsp),%edi  <span class="hljs-comment">; edi = input[0]</span><br>    <span class="hljs-number">2989</span>:e8 <span class="hljs-number">76</span> ff ff ff       <span class="hljs-keyword">call</span>   <span class="hljs-number">2904</span> &lt;func4&gt;  <span class="hljs-comment">; eax = func4(edi, esi, edx)</span><br>    298e:<span class="hljs-number">83</span> f8 <span class="hljs-number">0b</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xb,%eax  <span class="hljs-comment">; if (eax != 11) explode_bomb()</span><br>    <span class="hljs-number">2991</span>:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                <span class="hljs-keyword">jne</span>    299a &lt;phase_4+<span class="hljs-number">0x60</span>&gt;<br>    <span class="hljs-number">2993</span>:<span class="hljs-number">83</span> 7c <span class="hljs-number">24</span> <span class="hljs-number">04</span> <span class="hljs-number">0b</span>       cmpl   <span class="hljs-number">$0</span>xb,<span class="hljs-number">0x4</span>(%rsp)  <span class="hljs-comment">; if (input[1] != 11) explode_bomb()</span><br>    <span class="hljs-number">2998</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                <span class="hljs-keyword">je</span>     299f &lt;phase_4+<span class="hljs-number">0x65</span>&gt;<br>    299a:e8 <span class="hljs-number">44</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    <span class="hljs-comment">; ...</span><br></code></pre></td></tr></table></figure><p>分析发现，phase 4 对输入的要求如下：</p><ol><li>输入的第一个整数必须在 0 到 14 之间</li><li>计算 <code>func4(input[0], 0, 14)</code> 的结果必须为 11</li><li>输入的第二个整数必须为 11</li></ol><p>接着使用伟大的枚举法，枚举 <code>input[0]</code> 从 1 到 13 的值，得到 phase 4 的答案为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">0 11<br></code></pre></td></tr></table></figure><h1 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5"></a>Phase 5</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000029b9 &lt;phase_5&gt;:<br>    29b9:f3 0f 1e fa          endbr64<br>    29bd:<span class="hljs-number">53</span>                   <span class="hljs-keyword">push</span>   %rbx<br>    29be:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fb             <span class="hljs-keyword">mov</span>    %rdi,%rbx<br>    29c1:e8 f0 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2cb6 &lt;string_length&gt;<br>    29c6:<span class="hljs-number">83</span> f8 <span class="hljs-number">04</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x4,%eax<br>    29c9:<span class="hljs-number">75</span> 0c                <span class="hljs-keyword">jne</span>    29d7 &lt;phase_5+<span class="hljs-number">0x1e</span>&gt;<br>    29cb:b9 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x1,%ecx<br>    29d0:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%eax<br>    29d5:eb 1f                <span class="hljs-keyword">jmp</span>    29f6 &lt;phase_5+<span class="hljs-number">0x3d</span>&gt;<br>    29d7:e8 <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    29dc:eb ed                <span class="hljs-keyword">jmp</span>    29cb &lt;phase_5+<span class="hljs-number">0x12</span>&gt;<br>    29de:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d0             movslq %eax,%rdx<br>    29e1:0f b6 <span class="hljs-number">14</span> <span class="hljs-number">13</span>          movzbl (%rbx,%rdx,<span class="hljs-number">1</span>),%edx<br>    29e5:<span class="hljs-number">83</span> e2 <span class="hljs-number">07</span>             <span class="hljs-keyword">and</span>    <span class="hljs-number">$0</span>x7,%edx<br>    29e8:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">35</span> <span class="hljs-number">51</span> <span class="hljs-number">29</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2951</span>(%rip),%rsi        # <span class="hljs-number">5340</span> &lt;array<span class="hljs-number">.0</span>&gt;<br>    29ef:0f af 0c <span class="hljs-number">96</span>          <span class="hljs-keyword">imul</span>   (%rsi,%rdx,<span class="hljs-number">4</span>),%ecx<br>    29f3:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax<br>    29f6:<span class="hljs-number">83</span> f8 <span class="hljs-number">03</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x3,%eax<br>    29f9:7e e3                <span class="hljs-keyword">jle</span>    29de &lt;phase_5+<span class="hljs-number">0x25</span>&gt;<br>    29fb:<span class="hljs-number">81</span> f9 c0 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xc0,%ecx<br>    2a01:<span class="hljs-number">75</span> <span class="hljs-number">02</span>                <span class="hljs-keyword">jne</span>    2a05 &lt;phase_5+<span class="hljs-number">0x4c</span>&gt;<br>    2a03:5b                   <span class="hljs-keyword">pop</span>    %rbx<br>    2a04:c3                   <span class="hljs-keyword">ret</span><br>    2a05:e8 d9 <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    2a0a:eb f7                <span class="hljs-keyword">jmp</span>    2a03 &lt;phase_5+<span class="hljs-number">0x4a</span>&gt;<br></code></pre></td></tr></table></figure><p>phase 5 开头调用了 <code>string_length</code>，猜测输入要求是一个字符串。经过简单调试可以发现，输入的字符串储存在 <code>[%rdi]</code> 处，之后该值由 <code>%rbx</code> 保存，<code>string_length</code> 的返回值 <code>%rax</code> 代表字符串的长度。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000000029b9 &lt;phase_5&gt;:<br>    <span class="hljs-comment">; ...</span><br>    29bd:<span class="hljs-number">53</span>                   <span class="hljs-keyword">push</span>   %rbx<br>    29be:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fb             <span class="hljs-keyword">mov</span>    %rdi,%rbx <span class="hljs-comment">; *rbx = inputs</span><br>    29c1:e8 f0 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2cb6 &lt;string_length&gt;<br>    29c6:<span class="hljs-number">83</span> f8 <span class="hljs-number">04</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x4,%eax<br>    29c9:<span class="hljs-number">75</span> 0c                <span class="hljs-keyword">jne</span>    29d7 &lt;phase_5+<span class="hljs-number">0x1e</span>&gt;  <span class="hljs-comment">; if (length != 4) explode_bomb()</span><br>    29cb:b9 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x1,%ecx  <span class="hljs-comment">; ecx = 1</span><br>    29d0:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%eax  <span class="hljs-comment">; eax = 0</span><br>    29d5:eb 1f                <span class="hljs-keyword">jmp</span>    29f6 &lt;phase_5+<span class="hljs-number">0x3d</span>&gt;<br>    29d7:e8 <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    29dc:eb ed                <span class="hljs-keyword">jmp</span>    29cb &lt;phase_5+<span class="hljs-number">0x12</span>&gt;<br>    29de:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d0             movslq %eax,%rdx  <span class="hljs-comment">; loop rdx = eax</span><br>    29e1:0f b6 <span class="hljs-number">14</span> <span class="hljs-number">13</span>          movzbl (%rbx,%rdx,<span class="hljs-number">1</span>),%edx  <span class="hljs-comment">; edx = inputs[rdx]</span><br>    29e5:<span class="hljs-number">83</span> e2 <span class="hljs-number">07</span>             <span class="hljs-keyword">and</span>    <span class="hljs-number">$0</span>x7,%edx  <span class="hljs-comment">; edx = edx &amp; 0x7</span><br>    29e8:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">35</span> <span class="hljs-number">51</span> <span class="hljs-number">29</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x2951</span>(%rip),%rsi        # <span class="hljs-number">5340</span> &lt;array<span class="hljs-number">.0</span>&gt;<br>    29ef:0f af 0c <span class="hljs-number">96</span>          <span class="hljs-keyword">imul</span>   (%rsi,%rdx,<span class="hljs-number">4</span>),%ecx  <span class="hljs-comment">; ecx = ecx * array[edx]</span><br>    29f3:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax  <span class="hljs-comment">; eax++</span><br>    29f6:<span class="hljs-number">83</span> f8 <span class="hljs-number">03</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x3,%eax<br>    29f9:7e e3                <span class="hljs-keyword">jle</span>    29de &lt;phase_5+<span class="hljs-number">0x25</span>&gt;  <span class="hljs-comment">; loop while (eax &lt;= 3)</span><br>    29fb:<span class="hljs-number">81</span> f9 c0 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>xc0,%ecx<br>    2a01:<span class="hljs-number">75</span> <span class="hljs-number">02</span>                <span class="hljs-keyword">jne</span>    2a05 &lt;phase_5+<span class="hljs-number">0x4c</span>&gt;  <span class="hljs-comment">; if (ecx != 0xc0) explode_bomb()</span><br>    2a03:5b                   <span class="hljs-keyword">pop</span>    %rbx<br>    2a04:c3                   <span class="hljs-keyword">ret</span><br>    2a05:e8 d9 <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    2a0a:eb f7                <span class="hljs-keyword">jmp</span>    2a03 &lt;phase_5+<span class="hljs-number">0x4a</span>&gt;<br></code></pre></td></tr></table></figure><p>梳理一下程序逻辑：</p><ol><li>输入的字符串长度必须为 4</li><li>初始化 <code>ecx = 1</code>，<code>eax = 0</code></li><li>对字符串的每个字符（共 4 个），执行以下操作：<ol><li>取字符的 ASCII 码与 0x7 做与运算，结果作为索引从数组 <code>array.0</code> 中取值</li><li>将取出的值乘到 <code>ecx</code> 上</li><li><code>eax</code> 自增 1</li></ol></li><li>最终 <code>ecx</code> 必须等于 0xc0（即 192）<br>根据上述逻辑，接下来我们需要查看 <code>array.0</code> 的内容。让程序运行到 <code>29ef</code> 处，此时 <code>array.0</code> 的地址被储存在 <code>%rsi</code> 中，调用 <code>x/10wd $rsi</code> 以四字节为单位查看数组的前十个元素的十进制值。</li></ol><p><img src="/img/ics-bomblab/phase-5.png"></p><p>可见 <code>array.0</code> 由 8 个 int 类整数构成，接下来的事情就简单了，我们只需用数组中的数凑出乘积为 192 的一种组合，倒推出满足条件的四个字符即可。经过计算，phase 5 的答案之一为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hadd<br></code></pre></td></tr></table></figure><h1 id="Phase-6"><a href="#Phase-6" class="headerlink" title="Phase 6"></a>Phase 6</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">0000000000002a0c &lt;phase_6&gt;:<br>    2a0c:f3 0f 1e fa          endbr64<br>    2a10:<span class="hljs-number">41</span> <span class="hljs-number">54</span>                <span class="hljs-keyword">push</span>   %r12<br>    2a12:<span class="hljs-number">55</span>                   <span class="hljs-keyword">push</span>   %rbp<br>    2a13:<span class="hljs-number">53</span>                   <span class="hljs-keyword">push</span>   %rbx<br>    2a14:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">60</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x60,%rsp<br>    2a18:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 8b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">mov</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    2a1f:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    2a21:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">58</span>       <span class="hljs-keyword">mov</span>    %rax,<span class="hljs-number">0x58</span>(%rsp)<br>    2a26:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>    2a28:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             <span class="hljs-keyword">mov</span>    %rsp,%rsi<br>    2a2b:e8 <span class="hljs-number">39</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   <span class="hljs-number">3069</span> &lt;read_six_numbers&gt;<br>    2a30:bd <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%ebp<br>    2a35:eb <span class="hljs-number">27</span>                <span class="hljs-keyword">jmp</span>    2a5e &lt;phase_6+<span class="hljs-number">0x52</span>&gt;<br>    2a37:e8 a7 <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    2a3c:eb <span class="hljs-number">33</span>                <span class="hljs-keyword">jmp</span>    2a71 &lt;phase_6+<span class="hljs-number">0x65</span>&gt;<br>    2a3e:<span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%ebx<br>    2a41:<span class="hljs-number">83</span> fb <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%ebx<br>    2a44:7f <span class="hljs-number">15</span>                <span class="hljs-keyword">jg</span>     2a5b &lt;phase_6+<span class="hljs-number">0x4f</span>&gt;<br>    2a46:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c5             movslq %ebp,%rax<br>    2a49:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d3             movslq %ebx,%rdx<br>    2a4c:8b 3c <span class="hljs-number">94</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rdx,<span class="hljs-number">4</span>),%edi<br>    2a4f:<span class="hljs-number">39</span> 3c <span class="hljs-number">84</span>             <span class="hljs-keyword">cmp</span>    %edi,(%rsp,%rax,<span class="hljs-number">4</span>)<br>    2a52:<span class="hljs-number">75</span> ea                <span class="hljs-keyword">jne</span>    2a3e &lt;phase_6+<span class="hljs-number">0x32</span>&gt;<br>    2a54:e8 8a <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    2a59:eb e3                <span class="hljs-keyword">jmp</span>    2a3e &lt;phase_6+<span class="hljs-number">0x32</span>&gt;<br>    2a5b:<span class="hljs-number">44</span> <span class="hljs-number">89</span> e5             <span class="hljs-keyword">mov</span>    %r12d,%ebp<br>    2a5e:<span class="hljs-number">83</span> fd <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%ebp<br>    2a61:7f <span class="hljs-number">17</span>                <span class="hljs-keyword">jg</span>     2a7a &lt;phase_6+<span class="hljs-number">0x6e</span>&gt;<br>    2a63:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c5             movslq %ebp,%rax<br>    2a66:8b <span class="hljs-number">04</span> <span class="hljs-number">84</span>             <span class="hljs-keyword">mov</span>    (%rsp,%rax,<span class="hljs-number">4</span>),%eax<br>    2a69:<span class="hljs-number">83</span> e8 <span class="hljs-number">01</span>             <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2a6c:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%eax<br>    2a6f:<span class="hljs-number">77</span> c6                <span class="hljs-keyword">ja</span>     2a37 &lt;phase_6+<span class="hljs-number">0x2b</span>&gt;<br>    2a71:<span class="hljs-number">44</span> <span class="hljs-number">8d</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span>          <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x1</span>(%rbp),%r12d<br>    2a75:<span class="hljs-number">44</span> <span class="hljs-number">89</span> e3             <span class="hljs-keyword">mov</span>    %r12d,%ebx<br>    2a78:eb c7                <span class="hljs-keyword">jmp</span>    2a41 &lt;phase_6+<span class="hljs-number">0x35</span>&gt;<br>    2a7a:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%eax<br>    2a7f:eb <span class="hljs-number">11</span>                <span class="hljs-keyword">jmp</span>    2a92 &lt;phase_6+<span class="hljs-number">0x86</span>&gt;<br>    2a81:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c8             movslq %eax,%rcx<br>    2a84:ba <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x7,%edx<br>    2a89:2b <span class="hljs-number">14</span> 8c             <span class="hljs-keyword">sub</span>    (%rsp,%rcx,<span class="hljs-number">4</span>),%edx<br>    2a8c:<span class="hljs-number">89</span> <span class="hljs-number">14</span> 8c             <span class="hljs-keyword">mov</span>    %edx,(%rsp,%rcx,<span class="hljs-number">4</span>)<br>    2a8f:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2a92:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%eax<br>    2a95:7e ea                <span class="hljs-keyword">jle</span>    2a81 &lt;phase_6+<span class="hljs-number">0x75</span>&gt;<br>    2a97:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%esi<br>    2a9c:eb <span class="hljs-number">17</span>                <span class="hljs-keyword">jmp</span>    2ab5 &lt;phase_6+<span class="hljs-number">0xa9</span>&gt;<br>    2a9e:<span class="hljs-number">48</span> 8b <span class="hljs-number">52</span> <span class="hljs-number">08</span>          <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rdx),%rdx<br>    2aa2:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2aa5:<span class="hljs-number">48</span> <span class="hljs-number">63</span> ce             movslq %esi,%rcx<br>    2aa8:<span class="hljs-number">39</span> <span class="hljs-number">04</span> 8c             <span class="hljs-keyword">cmp</span>    %eax,(%rsp,%rcx,<span class="hljs-number">4</span>)<br>    2aab:7f f1                <span class="hljs-keyword">jg</span>     2a9e &lt;phase_6+<span class="hljs-number">0x92</span>&gt;<br>    2<span class="hljs-keyword">aad</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">54</span> cc <span class="hljs-number">20</span>       <span class="hljs-keyword">mov</span>    %rdx,<span class="hljs-number">0x20</span>(%rsp,%rcx,<span class="hljs-number">8</span>)<br>    2ab2:<span class="hljs-number">83</span> c6 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%esi<br>    2ab5:<span class="hljs-number">83</span> fe <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%esi<br>    2ab8:7f 0e                <span class="hljs-keyword">jg</span>     2ac8 &lt;phase_6+<span class="hljs-number">0xbc</span>&gt;<br>    2aba:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2abf:<span class="hljs-number">48</span> <span class="hljs-number">8d</span> <span class="hljs-number">15</span> 4a <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x664a</span>(%rip),%rdx        # <span class="hljs-number">9110</span> &lt;node1&gt;<br>    2ac6:eb <span class="hljs-built_in">dd</span>                <span class="hljs-keyword">jmp</span>    2aa5 &lt;phase_6+<span class="hljs-number">0x99</span>&gt;<br>    2ac8:<span class="hljs-number">48</span> 8b 5c <span class="hljs-number">24</span> <span class="hljs-number">20</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x20</span>(%rsp),%rbx<br>    2acd:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d9             <span class="hljs-keyword">mov</span>    %rbx,%rcx<br>    2ad0:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2ad5:eb <span class="hljs-number">12</span>                <span class="hljs-keyword">jmp</span>    2ae9 &lt;phase_6+<span class="hljs-number">0xdd</span>&gt;<br>    2ad7:<span class="hljs-number">48</span> <span class="hljs-number">63</span> d0             movslq %eax,%rdx<br>    2ada:<span class="hljs-number">48</span> 8b <span class="hljs-number">54</span> d4 <span class="hljs-number">20</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x20</span>(%rsp,%rdx,<span class="hljs-number">8</span>),%rdx<br>    2adf:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">51</span> <span class="hljs-number">08</span>          <span class="hljs-keyword">mov</span>    %rdx,<span class="hljs-number">0x8</span>(%rcx)<br>    2ae3:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax<br>    2ae6:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d1             <span class="hljs-keyword">mov</span>    %rdx,%rcx<br>    2ae9:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x5,%eax<br>    2aec:7e e9                <span class="hljs-keyword">jle</span>    2ad7 &lt;phase_6+<span class="hljs-number">0xcb</span>&gt;<br>    2aee:<span class="hljs-number">48</span> c7 <span class="hljs-number">41</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-keyword">movq</span>   <span class="hljs-number">$0</span>x0,<span class="hljs-number">0x8</span>(%rcx)<br>    2af5:<span class="hljs-number">00</span><br>    2af6:bd <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%ebp<br>    2afb:eb <span class="hljs-number">07</span>                <span class="hljs-keyword">jmp</span>    2b04 &lt;phase_6+<span class="hljs-number">0xf8</span>&gt;<br>    2afd:<span class="hljs-number">48</span> 8b 5b <span class="hljs-number">08</span>          <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rbx<br>    2b01:<span class="hljs-number">83</span> c5 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%ebp<br>    2b04:<span class="hljs-number">83</span> fd <span class="hljs-number">04</span>             <span class="hljs-keyword">cmp</span>    <span class="hljs-number">$0</span>x4,%ebp<br>    2b07:7f <span class="hljs-number">11</span>                <span class="hljs-keyword">jg</span>     2b1a &lt;phase_6+<span class="hljs-number">0x10e</span>&gt;<br>    2b09:<span class="hljs-number">48</span> 8b <span class="hljs-number">43</span> <span class="hljs-number">08</span>          <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rax<br>    2b0d:8b <span class="hljs-number">00</span>                <span class="hljs-keyword">mov</span>    (%rax),%eax<br>    2b0f:<span class="hljs-number">39</span> <span class="hljs-number">03</span>                <span class="hljs-keyword">cmp</span>    %eax,(%rbx)<br>    2b11:7e ea                <span class="hljs-keyword">jle</span>    2afd &lt;phase_6+<span class="hljs-number">0xf1</span>&gt;<br>    2b13:e8 cb <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br>    2b18:eb e3                <span class="hljs-keyword">jmp</span>    2afd &lt;phase_6+<span class="hljs-number">0xf1</span>&gt;<br>    2b1a:<span class="hljs-number">48</span> 8b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">58</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x58</span>(%rsp),%rax<br>    2b1f:<span class="hljs-number">64</span> <span class="hljs-number">48</span> 2b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">sub</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>    2b26:<span class="hljs-number">00</span> <span class="hljs-number">00</span><br>    2b28:<span class="hljs-number">75</span> <span class="hljs-number">09</span>                <span class="hljs-keyword">jne</span>    2b33 &lt;phase_6+<span class="hljs-number">0x127</span>&gt;<br>    2b2a:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">60</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x60,%rsp<br>    2b2e:5b                   <span class="hljs-keyword">pop</span>    %rbx<br>    2b2f:<span class="hljs-number">5d</span>                   <span class="hljs-keyword">pop</span>    %rbp<br>    2b30:<span class="hljs-number">41</span> 5c                <span class="hljs-keyword">pop</span>    %r12<br>    2b32:c3                   <span class="hljs-keyword">ret</span><br>    2b33:e8 <span class="hljs-number">78</span> f7 ff ff       <span class="hljs-keyword">call</span>   22b0 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p>相较于前几个 phase，phase 6 的代码量显著增加，分析难度也有所提升。首先我们注意到 <code>read_six_numbers</code> 函数的调用，猜测输入格式为六个整数，有了前几个 phase 的经验，六个整数应该依次储存在 <code>[%rsp]</code> 的位置（调试验证确实如此）。</p><p>由于汇编代码过长，一个可选的方案是对代码的主干部分进行人工反汇编，并将一些跳转逻辑转换成条件分支或循环，呈现为伪代码形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    rsi = rsp;<br>    rbp = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 第一阶段：检查输入合法性（无重复且1-6）</span><br>    <span class="hljs-keyword">while</span> (rbp &lt;= <span class="hljs-number">5</span>) &#123;<br>        rax = rbp;<br>        rax = [rsp + rax * <span class="hljs-number">4</span>];<br>        rax -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= rax &lt;= <span class="hljs-number">5</span>) &#123;  <span class="hljs-comment">// 注意 2ab8 处的 ja</span><br>            r12 = rbp + <span class="hljs-number">1</span>;<br>            rbx = r12;<br>            <span class="hljs-keyword">while</span> (rbx &lt;= <span class="hljs-number">5</span>) &#123;<br>                rax = rbp;<br>                rdx = rbx;<br>                rdi = [rsp + rdx * <span class="hljs-number">4</span>];<br>                <span class="hljs-keyword">if</span> ([rsp + rax * <span class="hljs-number">4</span>] == rdi) explode_bomb();<br>                rbx += <span class="hljs-number">1</span>;<br>            &#125;<br>            rbp = r12;<br>        &#125;<br>        <span class="hljs-keyword">else</span> explode_bomb();<br>    &#125;<br><br>    <span class="hljs-comment">// 第二阶段：转换输入值（7 - 原输入）</span><br>    rax = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (rax &lt;= <span class="hljs-number">5</span>) &#123;<br>        rcx = rax;<br>        rdx = <span class="hljs-number">7</span>;<br>        rdx -= *(rsp + rcx * <span class="hljs-number">4</span>);  <span class="hljs-comment">// 7 - 原输入值</span><br>        [rsp + rcx * <span class="hljs-number">4</span>] = rdx;<br>        rax += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 第三阶段：存储链表节点地址（基于转换后的值，第i个节点）</span><br>    rsi = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (rsi &lt;= <span class="hljs-number">5</span>) &#123;<br>        rax = <span class="hljs-number">1</span>;<br>        rdx = rip + <span class="hljs-number">0x664a</span>;  <span class="hljs-comment">// 调试时可查看，发现是链表节点的起始地址</span><br>        rcx = rsi;  <span class="hljs-comment">// index</span><br>        <span class="hljs-keyword">while</span> ([rsp + rcx * <span class="hljs-number">4</span>] &gt; rax) &#123;<br>            rdx = *(rdx + <span class="hljs-number">0x8</span>);  <span class="hljs-comment">// 移动到下一个节点</span><br>            rax += <span class="hljs-number">1</span>;<br>            rcx = rsi;<br>        &#125;<br>        *(rsp + <span class="hljs-number">0x20</span> + rcx * <span class="hljs-number">8</span>) = rdx;  <span class="hljs-comment">// 存储节点地址</span><br>        rsi += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 第四阶段：重新构建链表</span><br>    rbx = [rsp + <span class="hljs-number">0x20</span>];  <span class="hljs-comment">// 第一个储存的节点地址</span><br>    rcx = rbx;<br>    rax = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (rax &lt;= <span class="hljs-number">5</span>) &#123;<br>        rdx = rax;<br>        rdx = [rsp + <span class="hljs-number">0x20</span> + rdx * <span class="hljs-number">8</span>];<br>        *(rcx + <span class="hljs-number">0x8</span>) = rdx;<br>        rax += <span class="hljs-number">1</span>;<br>        rcx = rdx;  <span class="hljs-comment">// 新节点地址</span><br>    &#125;<br><br>    <span class="hljs-comment">// 第五阶段：校验链表升序</span><br>    rbp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (rbp &lt;= <span class="hljs-number">4</span>) &#123;<br>        rax = *(rbx + <span class="hljs-number">0x8</span>);  <span class="hljs-comment">// next 节点地址</span><br>        rax = *rax;  <span class="hljs-comment">// next 节点的值</span><br>        <span class="hljs-comment">// 比较当前节点值与 next 节点值</span><br>        <span class="hljs-keyword">if</span> (*rbx &gt; eax) &#123;  <span class="hljs-comment">// 注意 2b0f 处，四字节比较</span><br>            explode_bomb();<br>        &#125;<br>        rbx = *(rbx + <span class="hljs-number">0x8</span>);<br>        rbp += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了能够理解代码逻辑，我们需要事先知道 <code>[%rip + 0x664a]</code> 处的内容（虽然由 node 可猜测为链表节点）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 lea 0x657b (%rip), %rdx 的下一行设置断点，从而查看更新后的 %rdx</span><br>b *(phase_6+186)<br>c<br>x/24wx <span class="hljs-variable">$rdx</span><br></code></pre></td></tr></table></figure><p>得到输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb)x/24wx <span class="hljs-variable">$rdx</span><br>0x55555555d110 &lt;node1&gt;: 0x0000004e  0x00000001  0x5555d120  0x00005555<br>0x55555555d120 &lt;node2&gt;: 0x000002e8  0x00000002  0x5555d130  0x00005555<br>0x55555555d130 &lt;node3&gt;: 0x0000033b  0x00000003  0x5555d140  0x00005555<br>0x55555555d140 &lt;node4&gt;: 0x000003bb  0x00000004  0x5555d150  0x00005555<br>0x55555555d150 &lt;node5&gt;: 0x00000283  0x00000005  0x5555c080  0x00005555<br>0x55555555d160 &lt;host_table&gt;: 0x555596b2 0x00005555 0x555596bb 0x00005555<br>(gdb)x/4wx 0x000055555555c080<br>0x55555555c080 &lt;node6&gt;: 0x00000326  0x00000006  0x00000000  0x00000000<br></code></pre></td></tr></table></figure><p>结合小端法和汇编代码，推测 node 的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;          <span class="hljs-comment">// 节点值</span><br>    <span class="hljs-type">int</span> index;          <span class="hljs-comment">// 节点索引</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指向下一个节点的指针</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>现在我们知道了 node 的值，结合代码逻辑，可以反推 phase 6 的答案了：</p><ol><li>将 node 按照值从小到大排序，得到顺序为：<code>node1</code> -&gt; <code>node5</code> -&gt; <code>node2</code> -&gt; <code>node6</code> -&gt; <code>node3</code> -&gt; <code>node4</code></li><li>取出对应的索引，得到索引顺序为：<code>1 5 2 6 3 4</code></li><li>进行 <code>7 - i</code> 操作，得到 phase 6 的答案为：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">6 2 5 1 4 3<br></code></pre></td></tr></table></figure><h1 id="Secret-Phase"><a href="#Secret-Phase" class="headerlink" title="Secret Phase"></a>Secret Phase</h1>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pku</tag>
      
      <tag>ics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有手就行的博客搭建指南：Hexo + GitHub Pages</title>
    <link href="/2025/10/13/blog-setup-guide/"/>
    <url>/2025/10/13/blog-setup-guide/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始搭建博客之前，希望你对 Git 的基本操作有一定了解，并确保你的计算机上已经安装了以下软件：</p><ul><li><a href="https://nodejs.org/">Node.js</a>（建议使用 LTS 版本）</li><li><a href="https://git-scm.com/">Git</a></li></ul><p>可通过以下命令检查是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>git --version<br></code></pre></td></tr></table></figure><h1 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h1><p>在 GitHub 上新建一个仓库，需要特别注意的是仓库名需要为 <code>&lt;your_github_username&gt;.github.io</code> 。</p><p><img src="/img/blog-setup-guide/create-repo.png"></p><h1 id="搭建-Hexo-博客框架"><a href="#搭建-Hexo-博客框架" class="headerlink" title="搭建 Hexo 博客框架"></a>搭建 Hexo 博客框架</h1><h2 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h2><ol><li>将新建的仓库 clone 到本地（HTTPS 或 SSH 均可）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br>git <span class="hljs-built_in">clone</span> git@github.com:&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ol start="3"><li>初始化 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>由于 init 指令建站需要目标是空文件夹，所以我们可以任意指定一个文件夹，然后将其内容移动到仓库目录下。</p><ol start="4"><li>进入仓库目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;your_github_username&gt;.github.io<br></code></pre></td></tr></table></figure><p>正常情况下，项目文件夹结构应如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>选择一个心仪 Hexo 主题，这里以<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>为例。</p><ol><li>将主题仓库添加为子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule add https://github.com/fluid-dev/hexo-theme-fluid themes/fluid<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化并更新子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule init<br>git submodule update<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>此处的 <code>&lt;repo-url&gt;</code> 必须为 HTTPS 地址。若在拉取过程中遇到连接问题，可在运行 <code>git submodule init</code> 后先将 <code>.gitmodules</code> 文件 <code>commit</code> 到本地仓库保存，然后手动更改 <code>.gitmodules</code> 中的 URL 为 SSH 形式。接着运行以下命令更新子模块：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule <span class="hljs-built_in">sync</span><br>git submodule update<br></code></pre></td></tr></table></figure>           </div><ol start="3"><li>修改仓库目录下的 <code>_config.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><ol start="4"><li>在仓库目录下创建 <code>_config.fluid.yml</code> ，将主题的 <code>_config.yml</code> 内容复制过去，原因参见<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">Fluid 用户手册</a>。</li></ol><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>安装依赖并启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br>hexo server<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:4000</code> 即可预览博客。</p><h1 id="通过-GitHub-Pages-部署"><a href="#通过-GitHub-Pages-部署" class="headerlink" title="通过 GitHub Pages 部署"></a>通过 GitHub Pages 部署</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改仓库目录下的 <code>_config.yml</code> 中的 <code>url</code> ，将其更改为仓库地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;your_github_username&gt;.github.io</span><br></code></pre></td></tr></table></figure><h2 id="添加工作流文件"><a href="#添加工作流文件" class="headerlink" title="添加工作流文件"></a>添加工作流文件</h2><p>通常，将 <code>Hexo</code> 生成的页面通过 <code>GitHub Pages</code> 挂载后，每次提交博客都需要使用 <code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code> 命令来部署，比较繁琐。本文将介绍一种借助 <code>GitHub Actions</code> 来实现自动部署的方案，每当我们提交源代码到 GitHub 存放源码的分支上，便会启动工作流，自动将构建并将静态文件 push 到发布分支，实现部署。</p><p>在仓库目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<br><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span> <span class="hljs-comment"># 允许工作流写入仓库内容</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build_and_deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-comment"># 检出代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span> <span class="hljs-comment"># 更新子模块</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git submodule init</span><br><span class="hljs-string">          git submodule update --remote</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-comment"># 设置Node.js环境</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;22&quot;</span> <span class="hljs-comment"># 指定Node.js版本（与本地一致）</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">&quot;npm&quot;</span> <span class="hljs-comment"># 启用 npm 缓存，减少重复下载</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-comment"># 安装依赖</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm config set registry https://registry.npmmirror.com/</span><br><span class="hljs-string">          npm cache clean --force</span><br><span class="hljs-string">          npm install -g hexo-cli --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string">          npm install --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-comment"># 生成静态文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-comment"># 发布到gh-pages分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><h2 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h2><ol><li>保存并提交所有更改到 <code>main</code> 分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;chore: initial commit&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p>若进展顺利，GitHub Actions 会自动运行工作流，并将生成的静态文件推送到远程仓库的 <code>gh-pages</code> 分支。</p><p><img src="/img/blog-setup-guide/deploy-success.png"></p><ol start="2"><li>在 GitHub 仓库页面，进入 <code>Settings</code> -&gt; <code>Pages</code> ，在 <code>Source</code> 选项中选择 <code>Deploy from a branch</code> ，选择 <code>gh-pages</code> 分支 <code>/(root)</code> ，点击 <code>Save</code> 保存。</li></ol><p><img src="/img/blog-setup-guide/github-pages.png"></p><ol start="3"><li>访问 <code>https://&lt;your_github_username&gt;.github.io</code> 即可看到你的博客上线了！</li></ol><h1 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h1><p>在本地进行开发时，可以通过以下命令来创建一篇新文章或者新的页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>同时开启本地服务器进行预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>编辑完成后，使用以下命令提交到源代码仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;&lt;your commit message&gt;&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>详细开发指南请参考<a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a>和<a href="https://hexo.fluid-dev.com/docs/guide/">主题用户手册</a>。</p>           </div>]]></content>
    
    
    <categories>
      
      <category>TECH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

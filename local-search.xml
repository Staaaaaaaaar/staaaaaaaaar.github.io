<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ICS | 拆弹！我吗？</title>
    <link href="/2025/10/14/ics-bomblab/"/>
    <url>/2025/10/14/ics-bomblab/</url>
    
    <content type="html"><![CDATA[<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="熟悉-GDB-工具"><a href="#熟悉-GDB-工具" class="headerlink" title="熟悉 GDB 工具"></a>熟悉 GDB 工具</h2><p>建议事先阅读 CSAPP 中的 3.10.2 章节，这里给出部分指令参考：</p><table><thead><tr><th>指令</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>run</td><td>开始执行程序，直到下一个断点或程序结束</td></tr><tr><td>b</td><td>break</td><td>在指定位置设置断点</td></tr><tr><td>q</td><td>quit</td><td>退出 GDB 调试器</td></tr><tr><td>ni</td><td>next instruction</td><td>执行下一条指令</td></tr><tr><td>si</td><td>step instruction</td><td>执行当前指令，若是函数调用则进入函数</td></tr><tr><td>n</td><td>next</td><td>执行下一行代码</td></tr><tr><td>s</td><td>step</td><td>执行下一行代码，若有函数调用则进入函数</td></tr><tr><td>c</td><td>continue</td><td>从当前位置继续执行程序，直到下一个断点或程序结束</td></tr><tr><td>p</td><td>print</td><td>打印变量的值</td></tr><tr><td>p $rax</td><td></td><td>打印 %rax 寄存器的值</td></tr><tr><td>p&#x2F;x $rsp</td><td></td><td>以十六进制打印 %rsp 寄存器的值</td></tr><tr><td>p&#x2F;d $rsp</td><td></td><td>以十进制打印 %rsp 寄存器的值</td></tr><tr><td>x</td><td>examine</td><td>打印内存中的值</td></tr><tr><td>x&#x2F;2x $rsp</td><td></td><td>以十六进制格式查看 %rsp 处的 2 个内存单元</td></tr><tr><td>x&#x2F;2c $rsp</td><td></td><td>以字符格式查看 %rsp 处的 2 个内存单元</td></tr><tr><td>x&#x2F;s $rsp</td><td></td><td>将 %rsp 处的内存视为 C 风格字符串查看</td></tr><tr><td>x&#x2F;b $rsp</td><td></td><td>查看 %rsp 处的 1 个字节内存</td></tr><tr><td>x&#x2F;h $rsp</td><td></td><td>查看 %rsp 处的 1 个字（2 字节）内存</td></tr><tr><td>x&#x2F;w $rsp</td><td></td><td>查看 %rsp 处的 1 个二字（4 字节）内存</td></tr><tr><td>x&#x2F;g $rsp</td><td></td><td>查看 %rsp 处的 1 个四字（8 字节）内存</td></tr><tr><td>j</td><td>jump</td><td>跳转到程序指定位置</td></tr><tr><td>layout asm</td><td>assembly layout</td><td>显示汇编代码视图</td></tr><tr><td>layout regs</td><td>register layout</td><td>显示寄存器状态视图</td></tr></tbody></table><h2 id="了解炸弹结构"><a href="#了解炸弹结构" class="headerlink" title="了解炸弹结构"></a>了解炸弹结构</h2><p>首先，查看一下给出的 <code>bomb.c</code> 文件，了解炸弹的整体结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    input = read_line();<br>    phase_1(input);<br>    phase_defused(fp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Phase 1 defused. How about the next one?\n&quot;</span>);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>炸弹程序包含六个 <code>phase</code> ，每个 <code>phase</code> 都会读入一行输入，然后调用一个 <code>phase_defused</code> 函数来验证输入。</p><p>接着，我们反汇编 <code>bomb</code> 可执行文件，查看每个炸弹的细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d bomb &gt; bomb.asm<br></code></pre></td></tr></table></figure><p>阅读汇编代码，我们发现每个 <code>phase</code> 函数都包含一个 <code>explode_bomb</code> 的调用指令，形如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">27c1:   e8 <span class="hljs-number">1d</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">call</span>   2fe3 &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure><p>显而易见，这个函数会在输入错误时引爆炸弹，这是我们不想看到的。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>前文提到，我们不希望程序运行 <code>explode_bomb</code> 函数，因此我们利用 <code>gdb</code> 工具给 <code>explode_bomb</code> 设置断点，防止程序继续执行到引爆炸弹的指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb bomb<br>(gdb) b explode_bomb<br></code></pre></td></tr></table></figure><p>同时，为了方便我们对每个 <code>phase</code> 进行调试，我们也可以在每个 <code>phase</code> 函数入口处设置断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) b phase_1<br>(gdb) b phase_2<br>(gdb) b phase_3<br>(gdb) b phase_4<br>(gdb) b phase_5<br>(gdb) b phase_6<br></code></pre></td></tr></table></figure><h3 id="打开视图"><a href="#打开视图" class="headerlink" title="打开视图"></a>打开视图</h3><p>为了更好地观察程序每一步的执行情况以及寄存器状态，我们可以打开汇编代码视图和寄存器状态视图。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) layout asm<br>(gdb) layout regs<br></code></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>查看原代码发现，<code>bomb.c</code> 程序提供了文件读入的方式。为方便调试，我们可以将输入重定向到一个文件 <code>psol.txt</code> 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb bomb psol.txt<br></code></pre></td></tr></table></figure><h3 id="添加默认配置"><a href="#添加默认配置" class="headerlink" title="添加默认配置"></a>添加默认配置</h3><p>为了避免每次启动 <code>gdb</code> 都要手动设置断点，我们可以在当前目录下创建一个 <code>.gdbinit</code> 文件来设置 <code>gdb</code> 进入时的一些默认配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建当前目录下的 .gdbinit 文件</span><br><span class="hljs-built_in">touch</span> .gdbinit<br><span class="hljs-comment"># 创建 .config/gdb 文件夹</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/gdb<br><span class="hljs-comment"># 允许 gdb 预加载根目录下所有的文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set auto-load safe-path /&quot;</span> &gt; ~/.config/gdb/gdbinit<br></code></pre></td></tr></table></figure><p>在 <code>.gdbinit</code> 中添加默认配置：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> args <span class="hljs-comment">psol.txt</span><br><br>layout <span class="hljs-comment">asm</span><br>layout <span class="hljs-comment">regs</span><br><br>b <span class="hljs-comment">explode_bomb</span><br><br>b <span class="hljs-comment">phase_1</span><br>b <span class="hljs-comment">phase_2</span><br>b <span class="hljs-comment">phase_3</span><br>b <span class="hljs-comment">phase_4</span><br>b <span class="hljs-comment">phase_5</span><br>b <span class="hljs-comment">phase_6</span><br><br>r<br></code></pre></td></tr></table></figure><p>完成这些之后，我们就可以直接运行 <code>gdb bomb</code> 来开始拆弹了。</p><h1 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1"></a>Phase 1</h1><h1 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2"></a>Phase 2</h1><h1 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3"></a>Phase 3</h1><h1 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4"></a>Phase 4</h1><h1 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5"></a>Phase 5</h1><h1 id="Phase-6"><a href="#Phase-6" class="headerlink" title="Phase 6"></a>Phase 6</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化变量，对应原代码中的寄存器</span><br>    <span class="hljs-type">int</span> ax, bx, cx, dx, bp, sp, si;<br><br>    <span class="hljs-comment">// 代码片段1</span><br>    sp = <span class="hljs-number">0</span>;<br>    bp = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 标号3处的代码</span><br>    <span class="hljs-keyword">while</span> (bp &lt;= <span class="hljs-number">5</span>) &#123;<br>        ax = bp;<br>        ax = <span class="hljs-number">2</span> + (<span class="hljs-number">4</span> * ax) - <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (ax &lt;= <span class="hljs-number">5</span>) &#123;<br>            dx = bp + <span class="hljs-number">2</span>; <span class="hljs-comment">// 推测原代码含义</span><br>        &#125;<br><br>        bx = bx + <span class="hljs-number">5</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 标号6处的代码</span><br>    <span class="hljs-keyword">while</span> (ax == bp) &#123;<br>        ax = bx;<br>        dx = <span class="hljs-number">7</span> + (<span class="hljs-number">4</span> * ax);<br><br>        <span class="hljs-keyword">if</span> (dx == <span class="hljs-number">7</span> + (<span class="hljs-number">4</span> * ax)) &#123;<br>            <span class="hljs-comment">// 原代码中的&quot;break?&quot;推测为break</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bx++;<br>        &#125;<br><br>        bp = dx;<br>    &#125;<br><br>    <span class="hljs-comment">// 标号10处的代码</span><br>    ax = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 标号14处的代码</span><br>    <span class="hljs-keyword">while</span> (ax &lt;= <span class="hljs-number">5</span>) &#123;<br>        cx = ax;<br>        dx = <span class="hljs-number">7</span> - (<span class="hljs-number">4</span> * cx);<br>        memory[<span class="hljs-number">4</span> * ax] = dx; <span class="hljs-comment">// 处理[4*ax] = dx</span><br>        ax++;<br>    &#125;<br><br>    <span class="hljs-comment">// 标号19处的代码</span><br>    si = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (si &lt;= <span class="hljs-number">5</span>) &#123;<br>        ax = <span class="hljs-number">1</span>;<br>        dx = <span class="hljs-comment">/* 原代码&quot;rip + 0x6b4a&quot;难以直接转换，这里做简化 */</span> <span class="hljs-number">0</span>;<br>        dx = si;<br><br>        <span class="hljs-comment">// 标号55处的代码</span><br>        <span class="hljs-keyword">while</span> (ax &lt; (<span class="hljs-number">4</span> * cx)) &#123;<br>            dx = dx + <span class="hljs-number">8</span>;<br>            ax++;<br>            ax = si;<br>            memory[<span class="hljs-number">8</span> * cx + <span class="hljs-number">8</span>] = dx; <span class="hljs-comment">// 处理[8*cx+8] = dx</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 右侧代码片段</span><br>    <span class="hljs-comment">// 标号28处的代码</span><br>    <span class="hljs-keyword">while</span> (bp &lt;= <span class="hljs-number">4</span>) &#123;<br>        ax = bx + <span class="hljs-number">8</span>;<br>        ax = <span class="hljs-comment">/* 原代码&quot;[bx]&quot;推测为数组访问 */</span> memory[bx];<br><br>        <span class="hljs-keyword">if</span> (ax &lt; <span class="hljs-comment">/* 原代码&quot;[bx]&quot; */</span> memory[bx]) &#123;<br>            <span class="hljs-comment">// 原代码&quot;bomb?&quot;推测为某种处理</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;触发条件: bomb?\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bx = <span class="hljs-comment">/* 原代码&quot;[bx + 2]&quot; */</span> memory[bx + <span class="hljs-number">2</span>];<br>        &#125;<br>        bp++;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他零散代码</span><br>    ax = sp + <span class="hljs-number">2</span>; <span class="hljs-comment">// 处理[sp + 2]</span><br><br>    <span class="hljs-comment">// 标号26处的代码</span><br>    <span class="hljs-keyword">while</span> (ax &lt; <span class="hljs-number">5</span>) &#123;<br>        dx = ax;<br>        dx = <span class="hljs-number">18</span> + dx + <span class="hljs-number">32</span>; <span class="hljs-comment">// 处理[8*dx+32]</span><br>        memory[cx + <span class="hljs-number">7</span>] = dx;<br>        ax++;<br>        cx = dx;<br>        ax = dx;<br>    &#125;<br><br>    memory[cx + <span class="hljs-number">8</span>] = <span class="hljs-number">0</span>;<br>    bp = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Secret-Phase"><a href="#Secret-Phase" class="headerlink" title="Secret Phase"></a>Secret Phase</h1>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pku</tag>
      
      <tag>ics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有手就行的博客搭建指南：Hexo + GitHub Pages</title>
    <link href="/2025/10/13/blog-setup-guide/"/>
    <url>/2025/10/13/blog-setup-guide/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始搭建博客之前，希望你对 Git 的基本操作有一定了解，并确保你的计算机上已经安装了以下软件：</p><ul><li><a href="https://nodejs.org/">Node.js</a>（建议使用 LTS 版本）</li><li><a href="https://git-scm.com/">Git</a></li></ul><p>可通过以下命令检查是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>git --version<br></code></pre></td></tr></table></figure><h1 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h1><p>在 GitHub 上新建一个仓库，需要特别注意的是仓库名需要为 <code>&lt;your_github_username&gt;.github.io</code> 。</p><p><img src="/img/create-repo.png"></p><h1 id="搭建-Hexo-博客框架"><a href="#搭建-Hexo-博客框架" class="headerlink" title="搭建 Hexo 博客框架"></a>搭建 Hexo 博客框架</h1><h2 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h2><ol><li>将新建的仓库 clone 到本地（HTTPS 或 SSH 均可）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br>git <span class="hljs-built_in">clone</span> git@github.com:&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ol start="3"><li>初始化 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>由于 init 指令建站需要目标是空文件夹，所以我们可以任意指定一个文件夹，然后将其内容移动到仓库目录下。</p><ol start="4"><li>进入仓库目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;your_github_username&gt;.github.io<br></code></pre></td></tr></table></figure><p>正常情况下，项目文件夹结构应如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>选择一个心仪 Hexo 主题，这里以<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>为例。</p><ol><li>将主题仓库添加为子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule add https://github.com/fluid-dev/hexo-theme-fluid themes/fluid<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化并更新子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule init<br>git submodule update<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>此处的 <code>&lt;repo-url&gt;</code> 必须为 HTTPS 地址。若在拉取过程中遇到连接问题，可在运行 <code>git submodule init</code> 后先将 <code>.gitmodules</code> 文件 <code>commit</code> 到本地仓库保存，然后手动更改 <code>.gitmodules</code> 中的 URL 为 SSH 形式。接着运行以下命令更新子模块：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule <span class="hljs-built_in">sync</span><br>git submodule update<br></code></pre></td></tr></table></figure>           </div><ol start="3"><li>修改仓库目录下的 <code>_config.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><ol start="4"><li>在仓库目录下创建 <code>_config.fluid.yml</code> ，将主题的 <code>_config.yml</code> 内容复制过去，原因参见<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">Fluid 用户手册</a>。</li></ol><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>安装依赖并启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br>hexo server<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:4000</code> 即可预览博客。</p><h1 id="通过-GitHub-Pages-部署"><a href="#通过-GitHub-Pages-部署" class="headerlink" title="通过 GitHub Pages 部署"></a>通过 GitHub Pages 部署</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改仓库目录下的 <code>_config.yml</code> 中的 <code>url</code> ，将其更改为仓库地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;your_github_username&gt;.github.io</span><br></code></pre></td></tr></table></figure><h2 id="添加工作流文件"><a href="#添加工作流文件" class="headerlink" title="添加工作流文件"></a>添加工作流文件</h2><p>通常，将 <code>Hexo</code> 生成的页面通过 <code>GitHub Pages</code> 挂载后，每次提交博客都需要使用 <code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code> 命令来部署，比较繁琐。本文将介绍一种借助 <code>GitHub Actions</code> 来实现自动部署的方案，每当我们提交源代码到 GitHub 存放源码的分支上，便会启动工作流，自动将构建并将静态文件 push 到发布分支，实现部署。</p><p>在仓库目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<br><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span> <span class="hljs-comment"># 允许工作流写入仓库内容</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build_and_deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-comment"># 检出代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span> <span class="hljs-comment"># 更新子模块</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git submodule init</span><br><span class="hljs-string">          git submodule update --remote</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-comment"># 设置Node.js环境</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;22&quot;</span> <span class="hljs-comment"># 指定Node.js版本（与本地一致）</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">&quot;npm&quot;</span> <span class="hljs-comment"># 启用 npm 缓存，减少重复下载</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-comment"># 安装依赖</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm config set registry https://registry.npmmirror.com/</span><br><span class="hljs-string">          npm cache clean --force</span><br><span class="hljs-string">          npm install -g hexo-cli --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string">          npm install --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-comment"># 生成静态文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-comment"># 发布到gh-pages分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><h2 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h2><ol><li>保存并提交所有更改到 <code>main</code> 分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;chore: initial commit&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p>若进展顺利，GitHub Actions 会自动运行工作流，并将生成的静态文件推送到远程仓库的 <code>gh-pages</code> 分支。</p><p><img src="/img/deploy-success.png"></p><ol start="2"><li>在 GitHub 仓库页面，进入 <code>Settings</code> -&gt; <code>Pages</code> ，在 <code>Source</code> 选项中选择 <code>Deploy from a branch</code> ，选择 <code>gh-pages</code> 分支 <code>/(root)</code> ，点击 <code>Save</code> 保存。</li></ol><p><img src="/img/github-pages.png"></p><ol start="3"><li>访问 <code>https://&lt;your_github_username&gt;.github.io</code> 即可看到你的博客上线了！</li></ol><h1 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h1><p>在本地进行开发时，可以通过以下命令来创建一篇新文章或者新的页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>同时开启本地服务器进行预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>编辑完成后，使用以下命令提交到源代码仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;&lt;your commit message&gt;&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>详细开发指南请参考<a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a>和<a href="https://hexo.fluid-dev.com/docs/guide/">主题用户手册</a>。</p>           </div>]]></content>
    
    
    <categories>
      
      <category>TECH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有手就行的博客搭建指南：Hexo + GitHub Pages</title>
    <link href="/2025/10/13/blog-setup-guide/"/>
    <url>/2025/10/13/blog-setup-guide/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始搭建博客之前，希望你对Git的基本操作有一定了解，并确保你的计算机上已经安装了以下软件：</p><ul><li><a href="https://nodejs.org/">Node.js</a>（建议使用LTS版本）</li><li><a href="https://git-scm.com/">Git</a></li></ul><p>可通过以下命令检查是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>git --version<br></code></pre></td></tr></table></figure><h1 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h1><p>在GitHub上新建一个仓库，需要特别注意的是仓库名需要为 <code>&lt;your_github_username&gt;.github.io</code> 。</p><p><img src="/img/create-repo.png"></p><h1 id="搭建Hexo博客框架"><a href="#搭建Hexo博客框架" class="headerlink" title="搭建Hexo博客框架"></a>搭建Hexo博客框架</h1><h2 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h2><ol><li>将新建的仓库clone到本地（HTTPS或SSH均可）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br>git <span class="hljs-built_in">clone</span> git@github.com:&lt;your_github_username&gt;/&lt;your_github_username&gt;.github.io.git<br></code></pre></td></tr></table></figure><ol start="2"><li>安装Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ol start="3"><li>初始化Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>由于init指令建站需要目标是空文件夹，所以我们可以任意指定一个文件夹，然后将其内容移动到仓库目录下。</p><ol start="4"><li>进入仓库目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;your_github_username&gt;.github.io<br></code></pre></td></tr></table></figure><p>正常情况下，项目文件夹结构应如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>选择一个心仪Hexo主题，这里以<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>为例。</p><ol><li>将主题仓库添加为子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule add https://github.com/fluid-dev/hexo-theme-fluid themes/fluid<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化并更新子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule init<br>git submodule update<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>此处的 <code>&lt;repo-url&gt;</code> 必须为HTTPS地址。若在拉取过程中遇到连接问题，可在运行 <code>git submodule init</code> 后先将 <code>.gitmodules</code> 文件 <code>commit</code> 到本地仓库保存，然后手动更改 <code>.gitmodules</code> 中的URL为SSH形式。接着运行以下命令更新子模块：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule <span class="hljs-built_in">sync</span><br>git submodule update<br></code></pre></td></tr></table></figure>          </div><ol start="3"><li>修改仓库目录下的 <code>_config.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><ol start="4"><li>在仓库目录下创建 <code>_config.fluid.yml</code> ，将主题的 <code>_config.yml</code> 内容复制过去，原因参见<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">Fluid用户手册</a>。</li></ol><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>安装依赖并启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br>hexo server<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:4000</code> 即可预览博客。</p><h1 id="通过GitHub-Pages部署"><a href="#通过GitHub-Pages部署" class="headerlink" title="通过GitHub Pages部署"></a>通过GitHub Pages部署</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改仓库目录下的 <code>_config.yml</code> 中的 <code>url</code> ，将其更改为仓库地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;your_github_username&gt;.github.io</span><br></code></pre></td></tr></table></figure><h2 id="添加工作流文件"><a href="#添加工作流文件" class="headerlink" title="添加工作流文件"></a>添加工作流文件</h2><p>通常，将 <code>Hexo</code> 生成的页面通过 <code>GitHub Pages</code> 挂载后，每次提交博客都需要使用 <code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code> 命令来部署，比较繁琐。本文将介绍一种借助 <code>GitHub Actions</code> 来实现自动部署的方案，每当我们提交源代码到GitHub存放源码的分支上，便会启动工作流，自动将构建并将静态文件push到发布分支，实现部署。</p><p>在仓库目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span>  <span class="hljs-comment"># 允许工作流写入仓库内容</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build_and_deploy:</span><br><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>  <span class="hljs-comment"># 检出代码</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span>  <span class="hljs-comment"># 更新子模块</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git submodule init</span><br><span class="hljs-string">        git submodule update --remote</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span>  <span class="hljs-comment"># 设置Node.js环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;22&#x27;</span>  <span class="hljs-comment"># 指定Node.js版本（与本地一致）</span><br>        <span class="hljs-attr">cache:</span> <span class="hljs-string">&#x27;npm&#x27;</span>  <span class="hljs-comment"># 启用 npm 缓存，减少重复下载</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span>  <span class="hljs-comment"># 安装依赖</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm config set registry https://registry.npmmirror.com/</span><br><span class="hljs-string">        npm cache clean --force</span><br><span class="hljs-string">        npm install -g hexo-cli --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string">        npm install --registry=https://registry.npmmirror.com/</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span>  <span class="hljs-comment"># 生成静态文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo generate</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>  <span class="hljs-comment"># 发布到gh-pages分支</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br>        <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><h2 id="启用GitHub-Pages"><a href="#启用GitHub-Pages" class="headerlink" title="启用GitHub Pages"></a>启用GitHub Pages</h2><ol><li>保存并提交所有更改到 <code>main</code> 分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;chore: initial commit&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p>若进展顺利，GitHub Actions会自动运行工作流，并将生成的静态文件推送到远程仓库的 <code>gh-pages</code> 分支。</p><p><img src="/img/deploy-success.png"></p><ol start="2"><li>在GitHub仓库页面，进入 <code>Settings</code> -&gt; <code>Pages</code> ，在 <code>Source</code> 选项中选择 <code>Deploy from a branch</code> ，选择 <code>gh-pages</code> 分支 <code>/(root)</code> ，点击 <code>Save</code> 保存。</li></ol><p><img src="/img/github-pages.png"></p><ol start="3"><li>访问 <code>https://&lt;your_github_username&gt;.github.io</code> 即可看到你的博客上线了！</li></ol><h1 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h1><p>在本地进行开发时，可以通过以下命令来创建一篇新文章或者新的页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>同时开启本地服务器进行预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>编辑完成后，使用以下命令提交到源代码仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;&lt;your commit message&gt;&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>详细开发指南请参考<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>和<a href="https://hexo.fluid-dev.com/docs/guide/">主题用户手册</a>。</p>           </div>]]></content>
    
    
    <categories>
      
      <category>TECH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
